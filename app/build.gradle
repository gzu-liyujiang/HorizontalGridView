apply plugin: 'com.android.application'
apply from: "${rootDir}/gradle/common.gradle"
apply from: "${rootDir}/gradle/resguard.gradle"

dependencies {
    implementation project(":library")
    implementation "androidx.appcompat:appcompat:$androidxCoreVersion"
    implementation 'com.github.gzu-liyujiang:Logger:2020.06.14'
    runtimeOnly 'com.orhanobut:logger:2.2.0'
}

android {

    splits {
        abi {
            enable true
            reset()
            //支持的CPU架构：armeabi、armeabi-v7a、arm64-v8a、x86、x86_64、mips、mips64
            //目前主流手机都支持armeabi-v7a，armeabi已过时，arm64-v8a是未来的主流，电脑上的模拟器支持x86，mips基本不用于手机
            include 'armeabi-v7a', 'x86'
            universalApk false
        }
    }

    defaultConfig {
        multiDexEnabled false
        signingConfigs {
            //直接使用真实的密钥库文件，避免微信、高德地图等第三方SDK校验失败
            releaseConfig {
                try {
                    // {rootProject}/gradle.properties 或  {USER_HOME}/.gradle/gradle.properties
                    Map rootProp = project.getProperties()
                    def signingStorePath = rootProp.get('signingStorePath', '')
                    if (signingStorePath == '') {
                        throw new Exception('signing store path is empty from global gradle.properties')
                    }
                    println("[signing] store file: $signingStorePath")
                    def signingStorePassword = rootProp.get('signingStorePassword', '')
                    println("[signing] store password: $signingStorePassword")
                    def signingKeyAlias = rootProp.get('signingKeyAlias', '')
                    println("[signing] key alias: $signingKeyAlias")
                    def signingKeyPassword = rootProp.get('signingKeyPassword', '')
                    println("[signing] key password: $signingKeyPassword")
                    storeFile new File(signingStorePath)
                    storePassword signingStorePassword
                    keyAlias signingKeyAlias
                    keyPassword signingKeyPassword
                    v1SigningEnabled true
                    v2SigningEnabled true
                } catch (e) {
                    System.err.println('[signing] read failed from properties: ' + e.getMessage())
                    def signingStorePath = project.rootProject.file('app/debug.keystore').getAbsolutePath()
                    println("[signing] store file: $signingStorePath")
                    def signingStorePassword = 'android'
                    println("[signing] store password: $signingStorePassword")
                    def signingKeyAlias = 'androiddebugkey'
                    println("[signing] key alias: $signingKeyAlias")
                    def signingKeyPassword = 'android'
                    println("[signing] key password: $signingKeyPassword")
                    storeFile new File(signingStorePath)
                    storePassword signingStorePassword
                    keyAlias signingKeyAlias
                    keyPassword signingKeyPassword
                    v1SigningEnabled true
                    // 注：直接在IDE里运行APP，启用V2签名的话生成的APK里不会有签名信息的？
                    v2SigningEnabled true
                }
            }
        }
        applicationId appPackageName
        versionCode new Date().format("yyyyMMdd") as int
        versionName new Date().format("yyyy.M.d") as String
        //按不同维度打包，必须添加，不添加编译不通过，后面的数值任何字符串都可以
        flavorDimensions "MODE"
        manifestPlaceholders = [
                MY_CHANNEL: "default",
        ]
        buildConfigField "String", "BUILD_DATE", '"' + new Date().format("yyyy.MM.dd HH:mm:sss") + '"'
    }

    // 打包纬度，会按纬度名称字母顺序执行
    productFlavors {
        publisher {
            dimension "MODE"
            manifestPlaceholders = [
                    MY_CHANNEL: "publisher",
            ]
            buildConfigField "String", "ENVIRONMENT", '"pub"'
        }
        developer {
            dimension "MODE"
            manifestPlaceholders = [
                    MY_CHANNEL: "developer",
            ]
            buildConfigField "String", "ENVIRONMENT", '"dev"'
        }
    }

    buildTypes {
        //线上版本
        release {
            debuggable false
            jniDebuggable false
            //是否zip优化
            zipAlignEnabled true
            //是否移除无用的资源：工具栏->Refactor->Remove Unused Resources
            shrinkResources false
            //是否混淆
            minifyEnabled true
            //混淆配置文件
            proguardFiles 'proguard-common.pro', 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
        //调试版本
        debug {
            debuggable true
            jniDebuggable true
            zipAlignEnabled true
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.releaseConfig
        }
    }

}

//APK重命名
android.applicationVariants.all { variant ->
    variant.outputs.all {
        if (variant.buildType.name == 'debug') {
            //debug版本不重定义输出目录，也不重命名
            return
        }
        if (outputFileName != null && outputFileName.endsWith(".apk")) {
            def versionCode = android.defaultConfig.versionCode
            def versionName = android.defaultConfig.versionName
            String fileName = "${outputFile.name.replace('-release.apk', '')}-v${versionName}-built${versionCode}.apk"
            //这里只能用相对路径，不然报错
            outputFileName = new File(fileName)
        }
    }
    //APK构建完成后，备份release版本到指定目录
    tasks.all { it ->
        def maybeNeedCopy
        if (it.name.startsWith("resguard")) {
            maybeNeedCopy = true
        } else {
            maybeNeedCopy = it.name.startsWith("assemble");
        }
        if (maybeNeedCopy) {
            it.doLast {
                variant.outputs.each { output ->
                    File outputFile = output.outputFile;
                    if (outputFile != null && outputFile.name.endsWith('.apk') && variant.buildType.name == 'release') {
                        File targetDir = rootProject.file("release")
                        targetDir.mkdirs()
                        copy {
                            from outputFile
                            into targetDir
                        }
                    }
                }
            }
        }
    }
}
